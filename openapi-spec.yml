openapi: '3.0.2'

info:
  title: CyberDAS API
  version: '0.3'
  contact:
    email: api@cyberdas.net

servers:
  - url: https://api.cyberdas.net/v1

tags: 
  - name: Аутентификация
    description: 'Всё, что относится к аутентификации и управлению идентичностями'
  - name: Очереди
    description: 'Логика очередей и массового обслуживания'

paths:

  /signup:

    post:
      summary: Позволяет зарегистрировать новый аккаунт
      tags:
        - Аутентификация
      security: []   # доступно без аутентификации

      requestBody:
        required: true
        description: JSON-объект, содержащий данные для регистрации (почту, ФИО, ...)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      
      responses:
        '200':
          description: Письмо отправлено. Для подтверждения регистрации нужно перейти по ссылке из письма.
        '403':
          description: Пользователь с такой почтой уже зарегистрирован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnexpectedError'
  
  /login:

    post:
      summary: Начинает сессию и возвращает аутентификационный куки
      tags:
        - Аутентификация
      security: []   # доступно без аутентификации

      requestBody:
        required: true
        description: JSON-объект, содержащий логин и пароль.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'

      parameters:
        - name: remember
          in: query
          schema: 
            type: boolean
          required: false
          allowEmptyValue: true
          description: Если присутствует в query, то помимо короткой сессии создается и долгая двухнедельная.
      
      responses:
        '200':
          description: >
            Успешная авторизация.
            Идентификатор сессии возвращается в 'SESSIONID'-куки. Этот куки должен использоваться для дальнейших запросов.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: SESSIONID=abcde12345; Path=/; HttpOnly
            XCSRF-token: 
              schema:
                type: string
                example: WfF1szMUHhiokx9AHFply5L2xAOfjRkE
        '401':
          description: Неверно введен адрес почты или пароль
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /refresh:

    get:
      summary: Продлевает сессию пользователя
      tags:
        - Аутентификация
      security: []   # доступно без аутентификации

      responses:
        '200':
          description: Сессия успешно продлена.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: SESSIONID=abcde12345; Path=/; HttpOnly
        default:
          $ref: '#/components/responses/UnexpectedError'

  /restore:

    get:
      summary: Позволяет аутентифицироваться по токену `Remember me` без пароля
      tags:
        - Аутентификация
      security: []   # доступно без аутентификации

      parameters:
        - in: cookie 
          name: REMEMBER
          schema:
            type: string
          required: true

      responses:
        '200':
          description: Сессия и новый токен успешно созданы
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: SESSIONID=abcde12345; Path=/; HttpOnly
            XCSRF-token: 
              schema:
                type: string
                example: WfF1szMUHhiokx9AHFply5L2xAOfjRkE
        default:
          $ref: '#/components/responses/UnexpectedError'

  /resend:

    post:
      summary: Заново отправляет верификационное письмо на почту
      tags:
        - Аутентификация
      security: []   # доступно без аутентификации

      requestBody:
        required: true
        description: JSON-объект, содержащий адрес почты.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendRequest'

      responses:
        '200':
          description: Если такой пользователь зарегистрирован, то письмо отправлено.
        '403':
          description: Этот пользователь уже верифицирован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /verify:

    get:
      summary: Подтверждает адрес почты пользователя
      tags:
        - Аутентификация
      security: []   # доступно без аутентификации

      responses:
        '200':
          description: Адрес успешно подтвержден.
        '303':
          description: Адрес успешно подтвержден.  
          headers: 
            Location:
              schema: 
                type: string
                example: cyberdas.net/verify
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /logout:

    get:
      summary: Заканчивает сессию пользователя
      tags:
        - Аутентификация

      responses:
        '200':
          description: Сессия успешно завершена.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /me:

    get:
      summary: Возвращает информацию о пользователе
      tags:
        - Аутентификация
      
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /queues:

    get:
      summary: Возвращает список очередей и их описание
      tags:
        - Очереди

      responses:
        '200':
          description: JSON-массив с очередями
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queues'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /queues/{queueName}:

    get:
      summary: Возвращает информацию о запрошенной очереди
      tags:
        - Очереди

      responses:
        '200':
          description: JSON-объект с информацией о очереди
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queue'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    put:
      summary: Создать или заменить ресурс очереди
      tags:
        - Очереди
      security:
        - adminAuth: []
      
      parameters:
        - name: queueName
          in: path
          required: true
          allowEmptyValue: false
          description: Имя очереди
          schema:
            type: string 
            example: "living"

      requestBody:
        $ref: '#/components/requestBodies/QueuePut'
      
      responses:
        '201':
          description: Очередь создана
        '204':
          description: Очередь заменена
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    delete:
      summary: Удалить ресурс очереди
      tags:
        - Очереди
      security:
        - adminAuth: []
      
      parameters:
        - name: queueName
          in: path
          required: true
          allowEmptyValue: false
          description: Имя очереди
          schema:
            type: string 
            example: "living"

      responses:
        '204':
          description: Очередь удалена
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /queues/{queueName}/slots:

    get:
      summary: Возвращает слоты в выбранной очереди в указанный промежуток дат
      tags:
        - Очереди
      
      parameters:
        - name: queueName
          in: path
          required: true
          allowEmptyValue: false
          description: Имя очереди
          schema:
            type: string 
            example: "living"
        - name: day
          in: query
          required: true
          allowEmptyValue: false
          description: Первый день для составления интервала дат
          schema:
            type: string
            format: date
            example: "2021-01-30"
        - name: offset
          in: query
          required: true
          allowEmptyValue: false
          description: Длина интервала дат 
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 90
            example: 4
      
      responses:
        '200':
          description: JSON-массив со слотами на дни с `day` по `day`+`offset`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slots'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    put:
      summary: Создать или заменить коллекцию слотов очереди
      tags:
        - Очереди
      security:
        - adminAuth: []
      
      parameters:
        - name: queueName
          in: path
          required: true
          allowEmptyValue: false
          description: Имя очереди
          schema:
            type: string 
            example: "living"

      requestBody:
        $ref: '#/components/requestBodies/SlotsPut'
      
      responses:
        '201':
          description: Слоты созданы
        '204':
          description: Слоты заменены
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    patch:
      summary: Модифицировать коллекцию слотов очереди
      tags:
        - Очереди
      security:
        - adminAuth: []
      
      parameters:
        - name: queueName
          in: path
          required: true
          allowEmptyValue: false
          description: Имя очереди
          schema:
            type: string 
            example: "living"
      
      requestBody:
        $ref: '#/components/requestBodies/SlotsPatch'
      
      responses:
        '204':
          description: Слоты изменены
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /queues/{queueName}/slots/{slotId}:

    get:
      summary: Возвращает информацию о запрошенном слоте в очереди
      tags:
        - Очереди

      parameters:
        - name: queueName
          in: path
          required: true
          allowEmptyValue: false
          description: Имя очереди
          schema:
            type: string 
            example: "living"
        - name: slotId
          in: path
          required: true
          allowEmptyValue: false
          description: ID слота
          schema:
            type: integer

      responses:
        '200':
          description: JSON-объект с информацией о слоте
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    delete:
      summary: Удалить слот
      tags:
        - Очереди
      security:
        - adminAuth: []
      
      parameters:
        - name: queueName
          in: path
          required: true
          allowEmptyValue: false
          description: Имя очереди
          schema:
            type: string 
            example: "living"
        - name: slotId
          in: path
          required: true
          allowEmptyValue: false
          description: ID слота
          schema:
            type: integer

      responses:
        '204':
          description: Слот удален
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /queues/{queueName}/slots/{slotId}/reservation:

    post:
      summary: Занять выбранный слот в выбранной очереди
      tags:
        - Очереди
      
      parameters:
        - name: queueName
          in: path
          required: true
          allowEmptyValue: false
          description: Имя очереди
          schema:
            type: string 
            example: "living"
        - name: slotId
          in: path
          required: true
          allowEmptyValue: false
          description: ID слота
          schema:
            type: integer
      
      responses:
        '200':
          description: Успешная запись
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          description: Этот слот уже занят или Вы уже записались в эту очередь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnexpectedError'
    
    delete:
      summary: Отменить бронирование слота
      tags:
        - Очереди
      security:
        # Нужно либо cookieAuth, либо adminAuth
        - cookieAuth: []
        - adminAuth: []
      
      parameters:
        - name: queueName
          in: path
          required: true
          allowEmptyValue: false
          description: Имя очереди
          schema:
            type: string 
            example: "living"
        - name: slotId
          in: path
          required: true
          allowEmptyValue: false
          description: ID слота
          schema:
            type: integer

      responses:
        '204':
          description: Запись удалена
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

components: 

  schemas: 

    User:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
        surname:
          type: string
        patronymic:
          type: string
        faculty:
          type: string
        createdAt:
          type: string
          format: date
        email_verified:
          type: boolean
        verified:
          type: boolean
      required:
        - id
        - name
        - surname
        - faculty
        - createdAt
        - email_verified
        - verified

    Queue:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
      required:
        - name
        - title
        - description
        - startDate
        - endDate

    Queues:
      type: array
      items:
        $ref: '#/components/schemas/Queue'
    
    Slot:
      type: object
      properties:
        id:
          type: integer
        queueName:
          type: string
        datetime:
          type: string
          format: date-time
        free:
          type: boolean
      required:
        - id
        - queueName
        - date
        - free

    Slots:
      type: array
      items:
        $ref: '#/components/schemas/Slot'
      minItems: 1

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
      required:
        - email
        - password

    SignupRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        patronymic:
          type: string
        faculty:
          type: string
      required:
        - email
        - password
        - name
        - surname
        - faculty

    ResendRequest:
      type: object
      properties:
        email:
          type: string
      required:
        - email


  responses:

    UnexpectedError:
      description: Непредвиденная ошибка
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UnauthenticatedError:
      description: Неизвестный пользователь
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UnauthorizedError:
      description: Отсутствует право доступа
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'



  requestBodies:
    
    QueuePut:
      description: JSON-объект, содержащий информацию для создания очереди
      required: true
      content:
        'application/json':
          schema:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
              startDate:
                type: string
                format: date
              endDate:
                type: string
                format: date
            required:
              - title
              - description
              - startDate
              - endDate

    SlotsPut:
      description: JSON-массив, содержащий datetime'ы для создания слотов
      required: true
      content:
        'application/json':
          schema:
            type: array
            items:
              type: string
              format: date-time

    SlotsPatch:
      description: JSON-объект, содержащий datetime'ы для добавления новых слотов
      required: true
      content:
        'application/json':
          schema:
            # TODO: привести к формату [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902)
            type: array
            items:
              type: string
              format: date-time


  securitySchemes:

    cookieAuth:
      type: apiKey
      in: cookie
      name: SESSIONID

    adminAuth:
      type: apiKey
      in: cookie
      name: ADMINID


# Для совершения всех действий требуется активная сессия, если не указано иное
security:
  - cookieAuth: []
