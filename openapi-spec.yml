openapi: '3.0.2'

info:
  title: CyberDAS API
  version: '0.5'
  contact:
    email: api@cyberdas.net

servers:
  - url: https://api.cyberdas.net/v1
  - url: https://api.cyberdas.net/next

tags: 
  - name: Аутентификация
    description: 'Всё, что относится к аутентификации и управлению идентичностями'
  - name: Очереди
    description: 'Логика очередей и массового обслуживания'

paths:

  /account:

    get:
      summary: Возвращает информацию о текущем пользователе
      tags:
        - Аутентификация
      
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /account/signup:

    post:
      summary: Отправляет ссылку для создания аккаунта на почту
      tags:
        - Аутентификация
      security: []  # доступно без аутентификации

      parameters:
        - $ref: '#/components/parameters/emailNext'

      requestBody:
        $ref: '#/components/requestBodies/Signup'
      
      responses:
        '202':
          description: Письмо отправлено. Для завершения регистрации нужно перейти по ссылке из письма
        '403':
          description: Пользователь с такой почтой уже зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /account/signup/validate:
    
    get:
      summary: Завершает регистрацию после перехода по ссылке из регистрационного письма
      tags:
        - Аутентификация
      security: []  # доступно без аутентификации

      parameters:
        - name: token
          in: query
          required: true
          allowEmptyValue: false
          description: Токен из письма с данными для регистрации
          schema:
            type: string
            format: byte

      responses:
        '201':
          description: Аккаунт создан
        '403':
          description: Неверный токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /account/login:

    post:
      summary: Отправляет ссылку для начала новой сессии на почту
      tags:
        - Аутентификация
      security: []   # доступно без аутентификации

      parameters:
        - $ref: '#/components/parameters/emailNext'

      requestBody:
        $ref: '#/components/requestBodies/Login'
      
      responses:
        '202':
          description: Письмо отправлено. Для логина нужно перейти по ссылке из письма
        '400':
          description: Неверный адрес почты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /account/login/validate:
    
    get:
      summary: Возвращает сессионный куки после перехода по ссылке из письма
      tags:
        - Аутентификация
      security: []  # доступно без аутентификации

      parameters:
        - name: token
          in: query
          required: true
          allowEmptyValue: false
          description: Токен из письма с данными для логина
          schema:
            type: string
            format: byte

      responses:
        '201':
          description: >
            Успешная авторизация.
            Идентификатор сессии возвращается в 'SESSIONID'-куки. Этот куки должен использоваться для дальнейших запросов.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: SESSIONID=abcde12345; Path=/; HttpOnly
            X-CSRF-Token: 
              schema:
                type: string
                example: WfF1szMUHhiokx9AHFply5L2xAOfjRkE
        '403':
          description: Неверный или просроченный токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /account/logout:

    get:
      summary: Заканчивает сессию пользователя
      tags:
        - Аутентификация

      responses:
        '204':
          description: Сессия успешно завершена.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /queues:

    get:
      summary: Возвращает список очередей и их описание
      tags:
        - Очереди
      security: []   # доступно без аутентификации

      responses:
        '200':
          description: JSON-массив с очередями
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queues'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /queues/{queueName}:

    parameters:
      - $ref: '#/components/parameters/queueName'

    get:
      summary: Возвращает информацию о запрошенной очереди
      tags:
        - Очереди
      security: []   # доступно без аутентификации

      responses:
        '200':
          description: JSON-объект с информацией о очереди
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queue'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    put:
      summary: Создать или заменить ресурс очереди
      tags:
        - Очереди
      security:
        - adminAuth: []

      requestBody:
        $ref: '#/components/requestBodies/QueuePut'
      
      responses:
        '201':
          description: Очередь создана
        '204':
          description: Очередь заменена
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    delete:
      summary: Удалить ресурс очереди
      tags:
        - Очереди
      security:
        - adminAuth: []

      responses:
        '204':
          description: Очередь удалена
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /queues/{queueName}/slots:

    parameters:
      - $ref: '#/components/parameters/queueName'

    get:
      summary: Возвращает слоты в выбранной очереди в указанный промежуток дат
      tags:
        - Очереди
      security: []   # доступно без аутентификации
      
      parameters:
        - name: day
          in: query
          required: false
          allowEmptyValue: false
          description: Первый день для составления интервала дат
          schema:
            type: string
            format: date
            example: "2021-01-30"
        - name: offset
          in: query
          required: false
          allowEmptyValue: false
          description: Длина интервала дат 
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 90
            example: 4
        - name: my
          in: query
          required: false
          allowEmptyValue: true
          description: Возвращать слоты только запросившего пользователя
          schema:
            type: boolean
      
      responses:
        '200':
          description: JSON-массив со слотами на дни с `day` по `day`+`offset`-1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slots'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    put:
      summary: Создать или заменить коллекцию слотов очереди
      tags:
        - Очереди
      security:
        - adminAuth: []

      requestBody:
        $ref: '#/components/requestBodies/SlotsPut'
      
      responses:
        '201':
          description: Слоты созданы
        '204':
          description: Слоты заменены
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    patch:
      summary: Модифицировать коллекцию слотов очереди
      tags:
        - Очереди
      security:
        - adminAuth: []
      
      requestBody:
        $ref: '#/components/requestBodies/SlotsPatch'
      
      responses:
        '204':
          description: Слоты изменены
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /queues/{queueName}/slots/{slotId}:

    parameters:
      - $ref: '#/components/parameters/queueName'
      - $ref: '#/components/parameters/slotId'

    get:
      summary: Возвращает информацию о запрошенном слоте в очереди
      tags:
        - Очереди
      security: []   # доступно без аутентификации

      responses:
        '200':
          description: JSON-объект с информацией о слоте
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

    delete:
      summary: Удалить слот
      tags:
        - Очереди
      security:
        - adminAuth: []

      responses:
        '204':
          description: Слот удален
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /queues/{queueName}/slots/{slotId}/reserve:

    parameters:
      - $ref: '#/components/parameters/queueName'
      - $ref: '#/components/parameters/slotId'
      - $ref: '#/components/parameters/emailNext'

    post:
      summary: Занять выбранный слот в выбранной очереди
      tags:
        - Очереди
      security:
      - cookieAuth: []
        csrfToken: []

      requestBody:
        $ref: '#/components/requestBodies/QuickAuth'

      responses:
        '201':
          description: Успешная запись. На вашу почту выслана копия талона.
            Если ваши планы изменились, то вы можете отменить запись, пройдя
            по ссылке из письма.
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          description: Этот слот уже занят\истёк или Вы уже записались в эту очередь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          $ref: '#/components/responses/UnexpectedError'
    
    delete:
      summary: Отменить бронирование слота
      tags:
        - Очереди
      security:
        # Нужно либо cookieAuth, либо adminAuth
        - cookieAuth: []
        - adminAuth: []

      parameters:
        - $ref: '#/components/parameters/quickAuthToken'

      responses:
        '204':
          description: Запись удалена
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          $ref: '#/components/responses/UnexpectedError'

components: 

  schemas: 

    User:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
        surname:
          type: string
        patronymic:
          type: string
        faculty:
          type: string
        course:
          type: integer
        createdAt:
          type: string
          format: date
      required:
        - id
        - name
        - surname
        - faculty

    Queue:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        duration:
          description: Продолжительность слотов этой очереди, в минутах
          type: integer
        waterfall:
          description: Нужно ли представлять очередь в виде непрерывной последовательности слотов
          type: boolean
        only_once:
          description: Можно ли занять место в очереди только один раз
          type: boolean
      required:
        - name
        - title
        - description
        - duration
        - waterfall
        - only_once

    Queues:
      type: array
      items:
        $ref: '#/components/schemas/Queue'
    
    Slot:
      type: object
      properties:
        id:
          type: integer
        time:
          type: string
          format: date-time
        free:
          type: boolean
      required:
        - id
        - queueName
        - date
        - free

    Slots:
      type: array
      items:
        $ref: '#/components/schemas/Slot'
      minItems: 1

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string


  responses:

    UnexpectedError:
      description: Непредвиденная ошибка
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UnauthenticatedError:
      description: Неизвестный пользователь
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UnauthorizedError:
      description: Отсутствует право доступа
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'


  parameters:
    queueName:
      name: queueName
      in: path
      required: true
      description: Имя очереди
      schema:
        type: string
        example: "living"
    slotId:
      name: slotId
      in: path
      required: true
      description: ID запрашиваемого слота
      schema:
        type: integer
        example: 23
    quickAuthToken:
      name: token
      in: query
      required: false
      allowEmptyValue: false
      description: Подписанный токен, позволяющий аутентифицироваться на 
        некоторых эндпоинтах без процедуры логина и регистрации
      schema:
        type: string
        format: byte
    emailNext:
      name: next
      in: query
      required: false
      allowEmptyValue: false
      description: Параметр, который будучи указан, перенаправляет пользователя
        из письма на {frontend}/{next}, а не обратно на API
      schema:
        type: string


  requestBodies:

    Signup:
      description: JSON-объект, содержащий данные для регистрации нового аккаунта (почту, ФИО, ...)
      required: true
      content:
        'application/json':
          schema:
            type: object
            properties:
              email:
                type: string
              name:
                type: string
              surname:
                type: string
              patronymic:
                type: string
              faculty_id:
                type: integer
              course:
                type: integer
            required:
              - email
              - name
              - surname
              - faculty_id

    Login:
      description: JSON-объект, содержащий адрес почты для логина
      required: true
      content:
        'application/json':
          schema:
            type: object
            properties:
              email:
                type: string
            required:
              - email

    QuickAuth:
      description: JSON-объект, содержащий адрес почты для логина или все 
        данные, необходимые для регистрации. Позволяет пропустить регистрацию 
        и использовать некоторые защищенные эндпоинты без неё.
      required: false
      content:
        'application/json':
          schema:
            type: object
            properties:
              email:
                type: string
              name:
                type: string
              surname:
                type: string
              patronymic:
                type: string
              faculty_id:
                type: integer
              course:
                type: integer
            required:
              - email
    
    QueuePut:
      description: JSON-объект, содержащий информацию для создания очереди
      required: true
      content:
        'application/json':
          schema:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
              duration:
                type: integer
              waterfall:
                type: boolean
              only_once:
                type: boolean
            required:
              - title
              - description
              - duration
              - waterfall
              - only_once

    SlotsPut:
      description: JSON-массив, содержащий datetime'ы для создания слотов
      required: true
      content:
        'application/json':
          schema:
            type: array
            items:
              type: string
              format: date-time

    SlotsPatch:
      description: JSON-объект, содержащий datetime'ы для добавления новых слотов
      required: true
      content:
        'application/json':
          schema:
            # TODO: привести к формату [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902)
            type: array
            items:
              type: string
              format: date-time


  securitySchemes:

    cookieAuth:
      type: apiKey
      in: cookie
      name: SESSIONID

    csrfToken:
      type: apiKey
      in: header
      name: X-CSRF-Token

    adminAuth:
      type: apiKey
      in: cookie
      name: ADMINID


# Для совершения всех действий требуется активная сессия, если не указано иное
security:
  - cookieAuth: []
