name: run-tests

on:
  push:
    branches: [ main, next ]
  pull_request:
    branches: [ main, next ]

jobs:

  build:
    runs-on: [self-hosted, linux, X64]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: test
      - name: Setup config
        working-directory: test
        run: |
          python3 -c "
          with open('cfg.ini', 'r+') as f:
              d = f.read()

              d = d\
              .replace('DB_URL', '"'${{ secrets.DB_URL_TEST }}'"')\
              .replace('DB_USER', '"'${{ secrets.DB_USER_TEST }}'"')\
              .replace('DB_PASS', '"'${{ secrets.DB_PASS_TEST }}'"')\
              .replace('DB_NAME', '"'${{ secrets.DB_NAME_TEST }}'"')\
              .replace('SEC_SIGNUP', '"'${{ secrets.SEC_SIGNUP_TEST }}'"')\
              .replace('SEC_AUTH', '"'${{ secrets.SEC_AUTH_TEST }}'"')\
              .replace('SALT_SIGNUP', '"'${{ secrets.SALT_SIGNUP_TEST }}'"')\
              .replace('EMAIL_FROM', '"'${{ secrets.EMAIL_FROM }}'"')\
              .replace('EMAIL_SERVER', '"'${{ secrets.EMAIL_SERVER }}'"')\
              .replace('EMAIL_PORT', '"'${{ secrets.EMAIL_PORT }}'"')\
              .replace('EMAIL_LOGIN', '"'${{ secrets.EMAIL_LOGIN }}'"')\
              .replace('EMAIL_PASS', '"'${{ secrets.EMAIL_PASS }}'"')
              
              f.seek(0)
              f.write(d)
              f.write('''
          [cdci]
          build = test
          ''')
              f.truncate()
              f.close()"
      - name: Install app
        working-directory: test
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -e ".[testing]"
  
  test:
    needs: build
    runs-on: [self-hosted, linux, X64]
    steps:
      - name: Initialize DB
        working-directory: test
        run: |
          source .venv/bin/activate
          alembic -c cfg.ini upgrade head
          initialize_db
      - name: Run linter
        working-directory: test
        run: |
          source .venv/bin/activate
          flake8
      - name: Run tests
        id: testStep
        working-directory: test
        run: |
          source .venv/bin/activate
          pytest -W error --cov=cyberdas --cov-report=xml
      - name: Debug test failure
        working-directory: test
        if: ${{ always() && steps.testStep.outcome == 'failure' }}
        run: |
          source .venv/bin/activate
          pytest -qs --no-summary
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: ./test/coverage.xml
          fail_ci_if_error: true
      - name: Wipe files
        run: rm -rf test
